user  www-data;
worker_processes  2;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

env GS_BUCKET;
env INDEX;

events {
    worker_connections  10240;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    resolver                   8.8.8.8 valid=300s ipv6=off;
    resolver_timeout           10s;

    gzip on;

    server_tokens off;

    lua_package_path ";;${prefix}/lua/?.lua;";

    server {
        if ( $request_method !~ "GET|HEAD" ) {
            return 405;
        }

        set        $auth_header "";
        set_by_lua $bucket_name 'return os.getenv("GS_BUCKET")';
        set_by_lua $index_name 'return os.getenv("INDEX") or "index.html"';

        access_by_lua_block {
            local json = require "json";

            local ctx = {}
            local res = ngx.location.capture("/.token", { ctx = ctx })
            if res.status ~= 200 then
                ngx.log(ngx.ERR, "Clould not fetch token. status=" .. (res.status or "nil"))
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            if not res.body then
                ngx.log(ngx.ERR, "Got empty token from metadata server")
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local token = json.decode(res.body)
            if not token or not token["access_token"] then
                ngx.log(ngx.ERR, "Invaid json from from metadata server: ", res.body)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            ngx.var.auth_header = "Bearer " .. token["access_token"]
        }

        location = /.token {
            internal;
            resolver 169.254.169.254 valid=300s;

            proxy_pass http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token;
            proxy_set_header            Host            metadata.google.internal;
            proxy_set_header            Metadata-Flavor Google;
            proxy_pass_request_headers  off;
        }

        location / {
            rewrite /$ $uri$index_name;

            proxy_set_header    Host storage.googleapis.com;
            proxy_pass          https://storage.googleapis.com/$bucket_name$uri;
            proxy_http_version  1.1;
            proxy_set_header    Connection "";
            proxy_set_header    Authorization "$auth_header";

            proxy_intercept_errors on;
            proxy_hide_header       alt-svc;
            proxy_hide_header       X-GUploader-UploadID;
            proxy_hide_header       alternate-protocol;
            proxy_hide_header       x-goog-hash;
            proxy_hide_header       x-goog-generation;
            proxy_hide_header       x-goog-metageneration;
            proxy_hide_header       x-goog-stored-content-encoding;
            proxy_hide_header       x-goog-stored-content-length;
            proxy_hide_header       x-goog-storage-class;
            proxy_hide_header       x-xss-protection;
            proxy_hide_header       accept-ranges;
            proxy_hide_header       Set-Cookie;
            proxy_ignore_headers    Set-Cookie;
        }
    }
}
